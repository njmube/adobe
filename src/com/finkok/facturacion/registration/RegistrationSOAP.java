package com.finkok.facturacion.registration;

import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import javax.xml.ws.Service;

/**
 * This class was generated by Apache CXF 3.1.15
 * 2018-06-15T12:19:48.546-05:00
 * Generated source version: 3.1.15
 * 
 */
@WebServiceClient(name = "RegistrationSOAP", 
                  wsdlLocation = "file:/C:/Users/Israel/workspace/WSClientesaso/WebContent/WEB-INF/timboxtest.wsdl",
                  targetNamespace = "http://facturacion.finkok.com/registration") 
public class RegistrationSOAP extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("http://facturacion.finkok.com/registration", "RegistrationSOAP");
    public final static QName Application = new QName("http://facturacion.finkok.com/registration", "Application");
    static {
        URL url = null;
        try {
            url = new URL("file:/C:/Users/Israel/workspace/WSClientesaso/WebContent/WEB-INF/timboxtest.wsdl");
        } catch (MalformedURLException e) {
            java.util.logging.Logger.getLogger(RegistrationSOAP.class.getName())
                .log(java.util.logging.Level.INFO, 
                     "Can not initialize the default wsdl from {0}", "file:/C:/Users/Israel/workspace/WSClientesaso/WebContent/WEB-INF/timboxtest.wsdl");
        }
        WSDL_LOCATION = url;
    }

    public RegistrationSOAP(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public RegistrationSOAP(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public RegistrationSOAP() {
        super(WSDL_LOCATION, SERVICE);
    }
    
    public RegistrationSOAP(WebServiceFeature ... features) {
        super(WSDL_LOCATION, SERVICE, features);
    }

    public RegistrationSOAP(URL wsdlLocation, WebServiceFeature ... features) {
        super(wsdlLocation, SERVICE, features);
    }

    public RegistrationSOAP(URL wsdlLocation, QName serviceName, WebServiceFeature ... features) {
        super(wsdlLocation, serviceName, features);
    }    



//
//    /**
//     *
//     * @return
//     *     returns Application
//     */
//    @WebEndpoint(name = "Application")
//    public Application getApplication() {
//        return super.getPort(Application, Application.class);
//    }
//
//    /**
//     * 
//     * @param features
//     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
//     * @return
//     *     returns Application
//     */
//    @WebEndpoint(name = "Application")
//    public Application getApplication(WebServiceFeature... features) {
//        return super.getPort(Application, Application.class, features);
//    }

}
